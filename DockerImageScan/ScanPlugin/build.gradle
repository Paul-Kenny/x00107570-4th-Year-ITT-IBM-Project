/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Paul' at '3/27/17 8:13 AM' with Gradle 3.2.1
 *
 */

// Apply plugins
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'cobertura'

// Add Cobertura to classpath
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.4.0'
    }
}


// Project dependencies repository
repositories {
    mavenCentral()
}

// Dependencies for production and test code
dependencies {

    // Spock testing and specification framework
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'junit:junit:4.12'

    // Compile Gradle API
    compile gradleApi()

    // https://mvnrepository.com/artifact/org.codehaus.groovy/groovy-all
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.7'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-compress
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.13'

    // https://mvnrepository.com/artifact/org.tukaani/xz
    compile group: 'org.tukaani', name: 'xz', version: '1.6'

    // Resolve JDBC connector at runtime
    runtime 'mysql:mysql-connector-java:6.0.6'

}
// Cobertura configuration
cobertura {
    coverageExcludes = [ '.*ScanImage.*', '.*runScanImage.*', '.*DBInterface.*' ]
    coverageFormats = ['html', 'xml']
    coverageIgnoreTrivial = false
    coverageIgnores = ['org.slf4j.Logger.*']
    coverageReportDir = new File("$buildDir/reports/cobertura")
}
test.finalizedBy(project.tasks.cobertura)

group='com.scanImage'
version = '1.0-SNAPSHOT'

// Upload Archives
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('../repo'))
        }
    }
}



